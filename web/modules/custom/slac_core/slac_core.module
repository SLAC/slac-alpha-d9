<?php

/**
 * @file
 * Primary module hooks for slac_core module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\slac_core\Entity\Event;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use GuzzleHttp\Exception\RequestException;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;

/**
 * Implements hook_form_FORM_ID_alter() for the search_block_form form.
 *
 */
function slac_core_form_slac_search_form_alter(&$form, FormStateInterface $form_state) {
  // Since the exposed search form is a GET form, do not send the form tokens.
  // However, this cannot be accomplished in the form builder function
  // itself, because the tokens are added to the form after the builder function
  // is called. It has to be done in a form_alter,
  // see \Drupal\search\Form\SearchBlockForm.
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function slac_core_entity_bundle_info_alter(array &$bundles) {
  if (isset($bundles['node']['event'])) {
    $bundles['node']['event']['class'] = Event::class;
  }
}

/**
 * Implements hook_theme().
 */
function slac_core_theme($existing, $type, $theme, $path) {
  return [
    'filter_modal' => [
      'variables' => [
        'results_text' => NULL,
        'modal_content' => NULL,
        'num_results' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_oembed_resource_data_alter().
 */
function slac_core_oembed_resource_data_alter(array &$data, $url) {
  if (!isset($data['thumbnail_url'])) {
    return;
  }

  $client = \Drupal::httpClient();
  if (strpos($url, 'youtube.com/oembed') !== FALSE) {
    $default = 'hqdefault';
    $res = [
      'maxresdefault',
      'hqdefault',
      'sddefault',
    ];
    foreach ($res as $r) {
      $thumbnailUrl = str_replace($default, $r, $data['thumbnail_url']);
      try {
        $client->get($thumbnailUrl);
      }
      catch (RequestException $e) {
        continue;
      }
      $data['thumbnail_url'] = $thumbnailUrl;
      break;
    }
  }
  elseif (strpos($url, 'vimeo.com/api/oembed') !== FALSE) {
    $default = '295x166';
    $res = [
      ['width' => 1280, 'height' => 720],
      ['width' => 960, 'height' => 540],
      ['width' => 295, 'height' => 166],
    ];
    foreach ($res as $r) {
      $thumbnailUrl = str_replace($default, $r['width'], $data['thumbnail_url']);
      try {
        $client->get($thumbnailUrl);
      }
      catch (RequestException $e) {
        continue;
      }
      $data['thumbnail_width'] = $r['width'];
      $data['thumbnail_height'] = $r['height'];
      $data['thumbnail_url'] = $thumbnailUrl;
      break;
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function slac_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'related_content_for_detail_pages' && $view->current_display == 'news_article_related_stories') {
    $excluded_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
      'vid' => 'tags',
      'name' => 'Science News',
    ]);

    if ($excluded_terms) {
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if ($condition['field'] == 'node__field_tags.field_tags_target_id = :node__field_tags_field_tags_target_id') {
            $current_terms = explode('+', $condition['value'][':node__field_tags_field_tags_target_id']);
            // Keep the excluded term if it's the only term assigned to the current node.
            $excluded_terms = $current_terms == array_keys($excluded_terms) ? [] : $excluded_terms;
            $desired_terms = implode('+', array_diff($current_terms, array_keys($excluded_terms)));
            $condition = [
              'field' => 'node__field_tags.field_tags_target_id = :node__field_tags_field_tags_target_id',
              'value' => [
                ':node__field_tags_field_tags_target_id' => $desired_terms,
              ],
              'operator' => 'formula',
            ];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function slac_core_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $paragraph_entity_reference_field_name = $field_definition->getName();

  if ($paragraph_entity_reference_field_name == 'field_paragraphs') {
    /** @see \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget::formElement() */
    $widget_state = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);

    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph_instance->bundle();

    // Determine which paragraph type is being embedded.
    if ($paragraph_type == 'section') {
      $dependee_field_name = 'field_num_of_cols';
      $selector = sprintf('select[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], $dependee_field_name);

      // Dependent fields.
      $element['subform']['field_paragraphs_1']['#states'] = [
        'visible' => [
          $selector => ['value' => 1],
        ],
      ];

      $element['subform']['field_paragraphs_2']['#states'] = [
        'visible' => [
          $selector => ['value' => 2],
        ],
      ];

      $element['subform']['field_paragraphs_3']['#states'] = [
        'visible' => [
          $selector => ['value' => 3],
        ],
      ];

      $element['subform']['field_paragraphs_4']['#states'] = [
        'visible' => [
          $selector => ['value' => 4],
        ],
      ];
    }
  }
}

/**
 * Prepares variables for SLAC accordion views rows templates.
 *
 * Default template: views-slac-accordion-view.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The view object.
 *   - rows: An array of row items. Each row is an array of content.
 */
function slac_core_preprocess_views_slac_accordion_view(&$variables) {
  $view = $variables['view'];
  $rows = $variables['rows'];
  $style = $view->style_plugin;
  $options = $style->options;

  $variables['default_row_class'] = !empty($options['default_row_class']);
  foreach ($rows as $id => $row) {
    $variables['rows'][$id] = [];
    $variables['rows'][$id]['content'] = $row;
    $variables['rows'][$id]['attributes'] = new Attribute();
    if ($row_class = $view->style_plugin->getRowClass($id)) {
      $variables['rows'][$id]['attributes']->addClass($row_class);
    }
    if ($options['row-start-open'] == 'all' || $options['row-start-open'] == $id) {
      $variables['rows'][$id]['attributes']->setAttribute('data-accordion-open', 'true');
    }
  }
  $variables['collapsible'] = $options['collapsible'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function slac_core_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['simplesamlphp_auth_login_link'])) {

    $form['login_title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h1',
      '#value' => t('Login'),
      '#weight' => -999,
    ];
    $form['intro_text'] = [
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => t('Welcome back! Log in to access the website'),
      '#weight' => -998,
    ];
    $form['simplesamlphp_auth_login_link']['#weight'] = -99;

    unset($form['name'], $form['pass'], $form['actions']);
  }
}
