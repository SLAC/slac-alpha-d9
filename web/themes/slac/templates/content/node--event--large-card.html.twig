{#
/**
 * @file
 * Event card display, for both single day and multi-day card styles.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}

{#
/**
 * Format of date field as defined in the view_mode is standard HTMl format,
 * for example "2022-08-05T13:59:47-0700". Extract event start and end dates.
 * Assumes that the event field contains both a start_date and end_date, note
 * that both are required in the editing of an event and date order is
 * enforced.
 */
#}
{% set event_start_date = content.field_datetime_range.0.start_date["#attributes"]["datetime"] %}
{% set event_end_date = content.field_datetime_range.0.end_date["#attributes"]["datetime"] %}

{#
/**
 * Calculate the event start and end dates "day of the years" and compare to determine
 * if the event is a single day or multiday event. To account for the edge case of an
 * event spanning a year boundary (Dec. 31 - Jan. 1), check the year first.
 * Multiday event is signalled to the theming layer by passing null for end_date value.
 */
#}
{% set multiyear_event = event_start_date|date('y')|number_format != event_end_date|date('y')|number_format  %}
{% set multiday_event = multiyear_event or event_start_date|date('z')|number_format < event_end_date|date('z')|number_format %}

{#
/**
 * The Date/Time and Location field (field_override_text) overrides both the composed date line
 * the location line, in which case the 'footer' theme parameter is used, to avoid prefacing
 * the override text with either a calendar or location pin icon.
 */
#}
{% set datetime_location_override = content.field_override_text|field_value is not empty %}
{% set datetime_composed = null %}

{#
/**
 * If no override, compose the date string using different formats for single- and multiday
 * events. Display the "am" and "pm" for each time in case of event spanning across noon or
 * midnight. Timezone value is passed to template from view mode integral to date range value.
 */
#}
{% if datetime_location_override == false %}
  {% set datetime_composed %}
    {% if multiday_event == false %}
      {{ event_start_date|date("l, F j, Y") }}
      <br>
      {{- event_start_date|date("g:i a")|replace({"am":"a.m.", "pm":"p.m."}) }}&nbsp;&nbsp;–&nbsp;&nbsp;{{ event_end_date|date("g:i a")|replace({"am":"a.m.", "pm":"p.m."}) }}&nbsp;&nbsp;{{ event_start_date|date("T")|replace({"PST":"PT","PDT":"PT"}) -}}
    {% else %}
      {{- event_start_date|date("l, F j, Y") }}&nbsp;&nbsp;–&nbsp;&nbsp;{{ event_end_date|date("l, F j, Y") }}
    {% endif %}
  {% endset %}
{% endif %}

{#
/**
 * Display only the text of the field_link (location) field, but only if the datetime override
 * is not being used.
 */
#}
{% set location = null %}
{% if datetime_location_override == FALSE and content.field_link|field_value is not empty %}
  {% set location = content.field_link[0]['#title'] %}
{% endif %}

{#
/**
 * If the "Is external event?" field (field_boolean) is set then use the URL of the external link
 * field as the title URL. Otherwise use the node URL. External events will not have detail pages.
 * The external link field is not required, however, so the card title link may have no href.
 */
#}
{% include '@components/card/card.twig' with {
  'modifier_classes': 'c-card--large',
  'is_event': true,
  'title': label,
  'url': content.field_boolean['#items'].value == 0 ? url : content.field_external_link.0['#url'],
  'start_date': {
    'month': event_start_date|date('M'),
    'day': event_start_date|date('d')
  },
  'end_date': multiday_event == false ? null : {
    'month': event_end_date|date('M'),
    'day': event_end_date|date('d')
  },
  'event_type': content.field_type|render|striptags|trim,
  'type': node.getEventTense() ~ ' Event',
  'kicker': content.field_text|field_value,
  'footer': datetime_location_override ? content.field_override_text|field_value : null,
  'event_date': datetime_location_override ? null : datetime_composed,
  'event_location': location,
  'media': content.field_image|field_value,
  'card_content': content.field_teaser|field_value is not null ? content.field_teaser : content.field_body,
} %}

{% set catch_cache = content|render %}
