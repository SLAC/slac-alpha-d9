{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{% set classes = [
  node.isPromoted() ? 'is-promoted',
  node.isSticky() ? 'is-sticky',
  not node.isPublished() ? 'is-unpublished',
] %}

{% set attributes = attributes.addClass(classes) %}

{% set is_past_event = node.isPastEvent() %}

{% set admin_info %}
{{ region_status }}
{% endset %}

{% set show_admin_info = false %}

{% if admin_info|striptags('<drupal-render-placeholder>')|trim %}
  {% set show_admin_info = true %}
{% endif %}

<div class="c-main__meta">
  {{ drupal_block('system_breadcrumb_block') }}
  {{ drupal_block('share_this_page_block') }}
</div>

{% set additional_links = [] %}
{% if content.field_link2|field_value %}
  {% set additional_links = additional_links|merge([content.field_link2|field_value]) %}
{% endif %}
{% if site_settings['event:_links'] %}
  {% for event_link in site_settings['event:_links'].event_links %}
    {% if event_link.title %}
      {% set additional_links = additional_links|merge([link(event_link.title, event_link.uri, {'class': ['c-event-details__link']})])%}
    {% endif %}
  {% endfor %}
{% endif %}

{% set details %}
{% embed '@components/event-details/event-details.twig' with {
    'image': content.field_image|field_value,
    'video': content.field_video|field_value,
    'event_type': content.field_type|render|striptags|trim,
    'zoom_details': is_past_event ? false : content.field_detail_text|field_value,
    'additional_links': additional_links,
    'calendar_link_text': content.field_override_text|field_value ? content.field_override_text|field_value : content.field_datetime_range,
    'map_link_text': not is_past_event ? content.field_link|field_value : FALSE,
    'is_past_event': is_past_event
  } %}
  {% block event_ctas %}
    {{ content.field_links }}
  {% endblock %}
{% endembed %}
{% endset %}

{% set author_content %}
{% if content.field_name|field_value %}
  {{ content.field_name }}
{% endif %}
{{ content.field_person_image|field_value }}
{{ content.field_long_text|field_value }}
{% endset %}

{% set kicker %}
{{- node.getEventTense() }}
Event Â·
{{ content.field_text|field_value -}}
{% endset %}

{% include '@templates/event-detail/event-detail.twig' with {
  'page_title': label,
  'kicker': kicker,
  'lede': content.field_lede|field_value,
  'show_admin_info': show_admin_info,
  'admin_info': admin_info,
  'event_content': content.field_body,
  'details': details,
  'map_iframe': node.field_boolean2.value == '1' ? content.field_site_setting : false,
  'tags': content.field_tags,
  'visiting': node.field_boolean2.value == '1' ? drupal_entity('block', 'event_visitor_details', check_access=false)
} %}

{% set catch_cache = content|render %}
